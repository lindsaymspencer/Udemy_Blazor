@page "/lifecycle"

<h1>Lifecycle</h1>

@foreach (var item in EventType)
{
    @item <br/>
}
<div class="border">
    <LifecycleComponent CountValue="currentCount"></LifecycleComponent>
</div>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {
    private int currentCount = 0;
    List<string> EventType = new List<string>();

    private void IncrementCount()
    {
        currentCount++;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        EventType.Add("OnInitialized is called.");
    }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        EventType.Add("OnInitializedAsync is called.");
        await Task.Delay(1000);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        EventType.Add("OnParametersSet is called.");
    }

    protected override Task OnParametersSetAsync()
    {
        EventType.Add("OnParametersSetAsync is called.");
        return base.OnParametersSetAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        currentCount = firstRender ? 11111 : 99999;
        EventType.Add("OnAfterRender is called.");
        base.OnAfterRender(firstRender);
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        EventType.Add("OnAfterRenderAsync is called.");
        return base.OnAfterRenderAsync(firstRender);
    }

}