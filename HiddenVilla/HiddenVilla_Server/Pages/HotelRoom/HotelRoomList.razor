@page "/hotel-room"
@using Models
@using Business.Repository.IRepository
@inject IHotelRoomRepository HotelRoomRepository
@inject IJSRuntime JsRuntime
@inject HiddenVilla_Server.Service.IService.IFileUpload FileUpload

<div class="row mt-4">
    <div class="col-8">
        <h4 class="card-title text-info">Hotel Rooms</h4>
    </div>
    <div class="col-3 offset-1">
        <NavLink href="hotel-room/create" class="btn btn-info form-control">Add New Room</NavLink>
    </div>
</div>

<div class="row mt-4">
    <div class="col-md-12">
        <table class="table table-bordered table-hover">
            <thead>
            <tr>
                <th>Name</th>
                <th>Occupancy</th>
                <th>Rate</th>
                <th>Sq.Ft</th>
                <th></th>
            </tr>
            </thead>
            <tbody>
            @if (HotelRooms.Any())
            {
                foreach (HotelRoomDto hotelRoom in HotelRooms)
                {
                    <tr>
                        <td>@hotelRoom.Name</td>
                        <td>@hotelRoom.Occupancy</td>
                        <td>@hotelRoom.RegularRate.ToString("C")</td>
                        <td>@hotelRoom.SqFt</td>
                        <td>
                            <NavLink href="@($"hotel-room/edit/{hotelRoom.Id}")" class="btn btn-outline-dark">Edit</NavLink>
                            <button class="btn btn-danger" @onclick="()=>HandleDelete(hotelRoom.Id)">Delete</button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="5">No records found.</td>
                </tr>
            }
            </tbody>
        </table>
    </div>
</div>

<DeleteConfirmation ConfirmationChanged="ConfirmDelete_Click"></DeleteConfirmation>

@code {
    private IEnumerable<HotelRoomDto> HotelRooms { get; set; } = new List<HotelRoomDto>();
    private int? DeleteRoomId { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        HotelRooms = await HotelRoomRepository.ReadHotelRooms();
    }

    private async Task HandleDelete(int roomId)
    {
        DeleteRoomId = roomId;
        await JsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        if (isConfirmed && DeleteRoomId != null)
        {
            HotelRoomDto hotelRoom = await HotelRoomRepository.ReadHotelRoom(DeleteRoomId.Value);
            foreach (HotelRoomImageDto image in hotelRoom.HotelRoomImages)
            {
                FileUpload.DeleteFIle(image.RoomImageUrl.Replace($"RoomImages/",""));
            }
            await HotelRoomRepository.DeleteHotelRoom(DeleteRoomId.Value);
            await JsRuntime.ToasterSuccess("Hotel Room Deleted Successfully");
            HotelRooms = await HotelRoomRepository.ReadHotelRooms();
        }
        await JsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
    }

}
