@page "/hotel-room/create"
@page "/hotel-room/edit/{Id:int}"
@using Business.Repository.IRepository
@using Models
@inject IHotelRoomRepository HotelRoomRepository;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime;

<div class="row mt-2 mb-5">
    <h3 class="col-md-12">@Title Hotel Room</h3>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="@HotelRoomModel" OnValidSubmit="HandleRoomUpsert">
                    <DataAnnotationsValidator/>
                    <ValidationSummary></ValidationSummary>
                    <div class="form-group">
                        <label>Name</label>
                        <InputText @bind-Value="HotelRoomModel.Name" class="form-control"></InputText>
                        <ValidationMessage For="() => HotelRoomModel.Name"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Occupancy</label>
                        <InputNumber @bind-Value="HotelRoomModel.Occupancy" class="form-control"></InputNumber>
                    </div>
                    <div class="form-group">
                        <label>Regular Rate</label>
                        <InputNumber @bind-Value="HotelRoomModel.RegularRate" class="form-control"></InputNumber>
                    </div>
                    <div class="form-group">
                        <label>Sq. Feet</label>
                        <InputText @bind-Value="HotelRoomModel.SqFt" class="form-control"></InputText>
                    </div>
                    <div class="form-group">
                        <label>Details</label>
                        <InputTextArea @bind-Value="HotelRoomModel.Details" class="form-control"></InputTextArea>
                    </div>
                    <div class="form-group">
                        <InputFile OnChange="HandleImageUpload" multiple></InputFile>
                    </div>
                    <div class="form-group">
                        <button class="btn btn-primary">@Title Room</button>
                        <NavLink href="hotel-room" class="btn btn-secondary">Back to Index</NavLink>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public int? Id { get; set; }

    private HotelRoomDto HotelRoomModel { get; set; } = new();
    public string Title { get; set; } = "Create";

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
    // Updating
            Title = "Update";
            HotelRoomModel = await HotelRoomRepository.ReadHotelRoom(Id.Value);
        }
        else
        {
    // Creating
            HotelRoomModel = new HotelRoomDto();
        }
    }

    private async Task HandleRoomUpsert()
    {
        try
        {
            HotelRoomDto roomDetailsByName = await HotelRoomRepository.IsRoomUnique(HotelRoomModel.Name, HotelRoomModel.Id);
            // NOTE: This doesn't work if you don't update the room name when updating. I expect we'll fix it later. 
            if (roomDetailsByName != null)
            {
                await JsRuntime.ToasterError("Room name already exists.");
                return;
            }
            if (HotelRoomModel.Id != 0 && Title == "Update")
            {
                HotelRoomDto updateRoomResult = await HotelRoomRepository.UpdateHotelRoom(HotelRoomModel.Id, HotelRoomModel);
                await JsRuntime.ToasterSuccess("Hotel room updated successfully.");
            }
            else
            {
                HotelRoomDto createdResult = await HotelRoomRepository.CreateHotelRoom(HotelRoomModel);
                await JsRuntime.ToasterSuccess("Hotel room created successfully.");
            }
        }
        catch (Exception ex)
        {
    // log exception
            Console.WriteLine(ex);
            throw;
        }
        NavigationManager.NavigateTo("hotel-room");
    }

    private async Task HandleImageUpload()
    {
        throw new NotImplementedException();
    }

}