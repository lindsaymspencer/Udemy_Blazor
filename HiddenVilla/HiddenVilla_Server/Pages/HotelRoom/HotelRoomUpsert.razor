@page "/hotel-room/create"
@page "/hotel-room/edit/{Id:int}"
@using Business.Repository.IRepository
@using HiddenVilla_Server.Service.IService
@using Models
@using System.IO
@inject IHotelRoomRepository HotelRoomRepository;
@inject IHotelRoomImageRepository HotelRoomImageRepository;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime;
@inject IFileUpload FileUpload;

<div class="row mt-2 mb-5">
    <h3 class="col-md-12">@Title Hotel Room</h3>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="@HotelRoomModel" OnValidSubmit="HandleRoomUpsert">
                    <DataAnnotationsValidator />
                    <ValidationSummary></ValidationSummary>
                    <div class="form-group">
                        <label>Name</label>
                        <InputText @bind-Value="HotelRoomModel.Name" class="form-control"></InputText>
                        <ValidationMessage For="() => HotelRoomModel.Name"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Occupancy</label>
                        <InputNumber @bind-Value="HotelRoomModel.Occupancy" class="form-control"></InputNumber>
                    </div>
                    <div class="form-group">
                        <label>Regular Rate</label>
                        <InputNumber @bind-Value="HotelRoomModel.RegularRate" class="form-control"></InputNumber>
                    </div>
                    <div class="form-group">
                        <label>Sq. Feet</label>
                        <InputText @bind-Value="HotelRoomModel.SqFt" class="form-control"></InputText>
                    </div>
                    <div class="form-group">
                        <label>Details</label>
                        <InputTextArea @bind-Value="HotelRoomModel.Details" class="form-control"></InputTextArea>
                    </div>
                    <div class="form-group">
                        <InputFile OnChange="HandleImageUpload" multiple></InputFile>
                        <div class="row">
                            @if (HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Count > 0)
                            {
                                int serial = 1;
                                foreach (string roomImage in HotelRoomModel.ImageUrls)
                                {
                                    <div class="col-md-2, mt-3">
                                        <div class="room-image" style="background: url('@roomImage') 50% 50%; ">
                                            <span class="room-image-title">@serial</span>
                                        </div>
                                        <button type="button" @onclick="()=>DeletePhoto(roomImage)" class="btn btn-outline-danger btn-block mt-4">
                                            Delete
                                        </button>
                                    </div>
                                    serial++;
                                }
                            }
                        </div>
                    </div>
                    <div class="form-group">
                        <button class="btn btn-primary">@Title Room</button>
                        <NavLink href="hotel-room" class="btn btn-secondary">Back to Index</NavLink>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public int? Id { get; set; }

    private HotelRoomDto HotelRoomModel { get; set; } = new();
    public string Title { get; set; } = "Create";
    private HotelRoomImageDto RoomImage { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            // Updating
            Title = "Update";
            HotelRoomModel = await HotelRoomRepository.ReadHotelRoom(Id.Value);
            if (HotelRoomModel.HotelRoomImages != null)
            {
                HotelRoomModel.ImageUrls = HotelRoomModel.HotelRoomImages.Select(u => u.RoomImageUrl).ToList();
            }
        }
        else
        {
            // Creating
            HotelRoomModel = new HotelRoomDto();
        }
    }

    private async Task HandleRoomUpsert()
    {
        try
        {
            HotelRoomDto roomDetailsByName = await HotelRoomRepository.IsRoomUnique(HotelRoomModel.Name, HotelRoomModel.Id);
            // NOTE: This doesn't work if you don't update the room name when updating. I expect we'll fix it later. 
            if (roomDetailsByName != null)
            {
                await JsRuntime.ToasterError("Room name already exists.");
                return;
            }
            if (HotelRoomModel.Id != 0 && Title == "Update")
            {
                // Update
                HotelRoomDto updateRoomResult = await HotelRoomRepository.UpdateHotelRoom(HotelRoomModel.Id, HotelRoomModel);
                if (HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Any())
                {
                    await AddHotelRoomImage(updateRoomResult);
                }
                await JsRuntime.ToasterSuccess("Hotel room updated successfully.");
            }
            else
            {
                // Create
                HotelRoomDto createdResult = await HotelRoomRepository.CreateHotelRoom(HotelRoomModel);
                await AddHotelRoomImage(createdResult);
                await JsRuntime.ToasterSuccess("Hotel room created successfully.");
            }
        }
        catch (Exception ex)
        {
            // log exception
            Console.WriteLine(ex);
            throw;
        }
        NavigationManager.NavigateTo("hotel-room");
    }

    private async Task AddHotelRoomImage(HotelRoomDto roomDetails)
    {
        foreach (string imageUrl in HotelRoomModel.ImageUrls)
        {
            if (HotelRoomModel.HotelRoomImages== null|| HotelRoomModel.HotelRoomImages.Where(x => x.RoomImageUrl == imageUrl).Count() == 0)
            {
                RoomImage = new HotelRoomImageDto {RoomId = roomDetails.Id, RoomImageUrl = imageUrl};
                await HotelRoomImageRepository.CreateHotelRoomImage(RoomImage);
            }
        }
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs arg)
    {
        try
        {
            var images = new List<string>();
            if (arg.GetMultipleFiles().Count > 0)
            {
                foreach (IBrowserFile file in arg.GetMultipleFiles())
                {
                    var fileInfo = new FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" || fileInfo.Extension.ToLower() == ".png" || fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        string uploadedImagePath = await FileUpload.UploadFile(file);
                        images.Add(uploadedImagePath);
                    }
                    else
                    {
                        await JsRuntime.ToasterError("Please select .jpg/ .jpeg/ .png file only");
                        return;
                    }
                }
                if (images.Any())
                {
                    if (HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Any())
                    {
                        HotelRoomModel.ImageUrls.AddRange(images);
                    }
                    else
                    {
                        HotelRoomModel.ImageUrls = new List<string>();
                        HotelRoomModel.ImageUrls.AddRange(images);
                    }
                }
                else
                {
                    await JsRuntime.ToasterError("Image uploading Failed");
                    return;
                }
            }
        }
        catch (Exception e)
        {
            await JsRuntime.ToasterError(e.Message);
        }
    }

    private async Task DeletePhoto(string imageUrl)
    {
        try
        {
            var imageIndex = HotelRoomModel.ImageUrls.FindIndex(x => x == imageUrl);
            var imageName = imageUrl.Replace($"RoomImages/", "");
            if (HotelRoomModel.Id == 0 && Title == "Create")
            {
                var result = FileUpload.DeleteFIle(imageName);
            }
            HotelRoomModel.ImageUrls.RemoveAt(imageIndex);
        }
        catch (Exception e)
        {
            await JsRuntime.ToasterError(e.Message);
        }
    }

}